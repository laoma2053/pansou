server {
    listen 80;
    server_name _;  # 接受所有域名，由1Panel反向代理处理
    root /usr/share/nginx/html;
    index index.html;
    
    # 安全设置：添加访问控制
    # 只允许来自前端页面的请求访问API
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # 静态文件缓存
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Served-By "nginx";
    }
    
    # robots.txt 专用配置 - 确保正确的Content-Type，避免脚本注入
    location = /robots.txt {
        add_header Content-Type text/plain;
        expires 1d;
        add_header Cache-Control "public";
        add_header X-Served-By "nginx";
        
        # 确保直接返回文件，不经过任何处理
        try_files $uri =404;
    }
    
    # sitemap.xml 专用配置
    location = /sitemap.xml {
        add_header Content-Type application/xml;
        expires 1d;
        add_header Cache-Control "public";
        add_header X-Served-By "nginx";
        
        try_files $uri =404;
    }
    
    # 搜索API专用限流 - 必须放在通用API前面，优先匹配
    location /api/search {
        # 安全检查：限制API访问来源（可选，如果需要更严格的控制）
        # if ($http_referer !~ "^https?://[^/]*gugeso\.com") {
        #     return 403;
        # }
        
        # 搜索API限流 - 每分钟60次，突发允许20次，匹配高性能配置
        limit_req zone=search_limit burst=20 nodelay;
        limit_req_status 429;
        
        proxy_pass http://pansou-api:8888/api/search;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 搜索API高性能超时和缓冲区设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 90s;         # 增加发送超时，匹配120工作进程
        proxy_read_timeout 90s;         # 增加读取超时，适配4GB内存配置
        proxy_buffering on;
        proxy_buffer_size 128k;         # 合理的缓冲区大小
        proxy_buffers 8 256k;           # 合理的缓冲区数量和大小
        proxy_busy_buffers_size 256k;   # 合理的忙碌缓冲区大小
        
        # 请求体设置
        client_max_body_size 10m;
        proxy_request_buffering off;
        proxy_set_header Accept-Encoding "";
        
        # CORS设置
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        
        # 处理预检请求
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
    
    # 健康检查API专用配置 - 避免缓冲区导致的重复响应
    location = /api/health {
        proxy_pass http://pansou-api:8888/api/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 禁用缓冲，避免重复响应
        proxy_buffering off;
        proxy_cache off;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # 简化CORS设置
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type";
    }
    
    # 通用API代理到后端
    location /api/ {
        # 通用API限流 - 每分钟20次，突发允许10次，匹配高性能配置
        limit_req zone=api_limit burst=10 nodelay;
        limit_req_status 429;
        
        proxy_pass http://pansou-api:8888/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 通用API高性能超时和缓冲区设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 90s;         # 增加发送超时，匹配120工作进程
        proxy_read_timeout 90s;         # 增加读取超时，适配4GB内存配置
        proxy_buffering on;
        proxy_buffer_size 128k;         # 合理的缓冲区大小
        proxy_buffers 8 256k;           # 合理的缓冲区数量和大小
        proxy_busy_buffers_size 256k;   # 合理的忙碌缓冲区大小
        
        # 请求体设置
        client_max_body_size 10m;
        proxy_request_buffering off;
        proxy_set_header Accept-Encoding "";
        
        # CORS设置
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
        
        # 处理预检请求
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
    
    # 前端路由处理
    location / {
        try_files $uri $uri/ /index.html;
        add_header X-Served-By "nginx";
    }
    
    # nginx专用健康检查端点 - 使用不同的路径避免与API冲突
    location = /nginx-status {
        access_log off;
        return 200 "nginx ok\n";
        add_header Content-Type text/plain;
    }
    
    # 错误页面
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
